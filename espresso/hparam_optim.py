#!/usr/bin/env python3

import os
import argparse

parser = argparse.ArgumentParser(
    description='Tunes parameters of a script. You can use {{ARGS}} in the train command to refer to the hyperparameters of each model. {{RUN_ID}} refers to the run_id given in the space file.',
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
)
parser.add_argument(
    '--space',
    required=True,
    type=str,
    help='Path to a .py space file.',
)
parser.add_argument(
    '--train-command',
    required=True,
    type=str,
    help="Command that will train the model."
)
parser.add_argument(
    '--eval-command',
    required=True,
    type=str,
    help="Command (and additional args) that will evaluate the model. Should return only a value."
)
parser.add_argument(
    '--maximize',
    action='store_true',
    help="If set, maximizes the evaluation metric instead of minimizing."
)
parser.add_argument(
    '--num-workers',
    type=int,
    help="Number of MongoDB workers.",
    default=1
)
parser.add_argument(
    '--max-evals',
    type=int,
    help="Max numbers of tested models.",
    default=30
)
parser.add_argument(
    '--best-parameters-file',
    required=True,
    type=str,
    help="Filepath for saving the best hyper parameters."
)
parser.add_argument(
    '--mongo-db',
    type=str,
    help="MongoDB server host, port and database name.",
    default="localhost:1234/db_name"
)

args = parser.parse_args()
space_file = os.path.splitext(os.path.basename(args.space))[0]
args.train_command = args.train_command.replace('\n', '').replace('\t', '')

##

import time
import tempfile
import numpy as np
import subprocess
import importlib.machinery

from hyperopt import hp, fmin, tpe, space_eval, Trials
from hyperopt.mongoexp import MongoTrials, MongoJobs

loader = importlib.machinery.SourceFileLoader(space_file, args.space)
mod = loader.load_module()

def exec(command):
    return subprocess.check_output(command.split(' '))

def parse_params(params_dict):
    parsed = ""
    for arg in params_dict:
        if arg == 'run_id':
            continue
        parsed += " --{} {}".format(arg, params_dict[arg])
    return parsed

def parse_runid(text, run_id):
    return text.replace('{{RUN_ID}}', run_id)

def parse_args(text, given_args):
    return text.replace('{{ARGS}}', given_args)

def objective_func(hparams):
    if 'run_id' in hparams:
        run_id = str(hparams['run_id']).replace('.', '')

        args.train_command = parse_runid(args.train_command, run_id)
        args.eval_command = parse_runid(args.eval_command, run_id)

    parsed_params = parse_params(hparams)

    # train
    command = parse_args(args.train_command, parsed_params)
    with tempfile.NamedTemporaryFile(prefix='tune-hyperopt-', mode="w+", delete=False) as train_script:
        train_script.write("#!/usr/bin/env bash \n")
        train_script.write(command)
        train_script.flush()
        os.chmod(train_script.name, 0o770)
    exec(train_script.name)
    os.remove(train_script.name)

    # eval
    result = exec(args.eval_command)
    result = float(result)

    if args.maximize:
        result = -result

    return result

##

timestamp = str(time.time())
exp_key = "exp-tuning-{}".format(timestamp)

for i in range(args.num_workers):
    subprocess.Popen([
        'hyperopt-mongo-worker',
        '--mongo={}'.format(args.mongo_db),
        '--max-consecutive-failures=1',
        '--exp-key={}'.format(exp_key),
        '--workdir=.'
    ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

##

space = mod.SpaceParams.get_space()
trials = MongoTrials(
    'mongo://{}/jobs'.format(args.mongo_db),
    exp_key=exp_key,
    workdir=os.getcwd()
)
best = fmin(
    objective_func,
    space,
    algo=tpe.suggest,
    catch_eval_exceptions=True,
    verbose=True,
    max_queue_len=20,
    max_evals=args.max_evals,
    trials=trials
)

best_result = sorted(trials.results,
                     key=lambda x: x['loss'],
                     reverse=False)[0]['loss']
if args.maximize:
    best_result = -best_result

print("Best result: {}".format(best_result))
print("Saving best results parameters to {}.".format(args.best_parameters_file))

##

def write_conf_file(params_dict, f):
    print("# This file has been generated by hparam_optim. #", file=f)
    for arg in params_dict:
        if arg == "run_id":
            continue
        key = arg.replace('-', '_')
        value = params_dict[arg]
        print("{}={}".format(key, value), file=f)

with open(args.best_parameters_file, 'w') as f:
    write_conf_file(best, f)


##

mj = MongoJobs.new_from_connection_str('mongo://{}/jobs'.format(args.mongo_db))
mj.delete_all(cond={"exp_key": exp_key})
